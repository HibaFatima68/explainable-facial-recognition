<div class="flex items-center justify-center -min-h-screen p-4">
  <div
    class="feed-container hover:scale-110- duration-300 group bg-white hover:shadow-2xl hover:rounded-4xl relative rounded-xl shadow-lg overflow-hidden w-full">
    <noscript><p class="text-black">Please enable JavaScript to view the video feed.</p></noscript>
    <div class="feed-error hidden p-4 text-center">
      <p class="text-red-600 font-semibold mb-2">Error loading video feed.</p>
      <p class="text-black text-sm" id="error-message"></p>
    </div>
    <div class="feed-loading p-4 text-center">
      <p class="text-black">[Loading video feed...]</p>
    </div>
    <canvas class="feed-overlay absolute left-0 top-0 w-full h-full z-99 pointer-events-none"></canvas>
    <div
      class="group-hover:opacity-100 transition-opacity opacity-0 duration-300 absolute left-0 bottom-0 z-100 px-4 py-2">
      <p class="text-white">Video feed @ X FPS</p>
    </div>
    <video
      class="feed-video w-full h-auto object-cover p-0 m-0"
      title="Your video feed @ 24 FPS"
      playsinline
      autoplay
      muted></video>
  </div>
</div>

<script>
  const feedLoading = document.querySelector(".feed-loading") as HTMLDivElement;
  const feedError = document.querySelector(".feed-error") as HTMLDivElement;
  const errorMessageElement = document.getElementById("error-message") as HTMLParagraphElement;
  const video = document.querySelector(".feed-video") as HTMLVideoElement;

  // Function to display an error message
  function displayError(message: string): void {
    if (feedLoading) feedLoading.classList.add("hidden");
    if (feedError) feedError.classList.remove("hidden");
    if (errorMessageElement) errorMessageElement.textContent = message;
    if (video) video.classList.add("hidden"); // Hide the video element on error
  }

  // Check for browser compatibility
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    displayError("Your browser does not support media devices. Please try a different browser.");
    throw new Error("MediaStream object is not supported");
  }
  async function startVideoFeed(): Promise<void> {
    try {
      const mediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
        audio: false,
        video: {
          width: { ideal: 1280 }, // Request ideal width
          height: { ideal: 720 }, // Request ideal height
          facingMode: "user", // Prefer front camera
        },
      });

      video.srcObject = mediaStream;

      video.onloadedmetadata = () => {
        feedLoading.classList.add("hidden");
        video.classList.remove("hidden"); // Make sure video is visible
        video.play().catch((playError: DOMException) => {
          console.error("Error playing video:", playError);
          displayError("Could not play video. Please check your browser settings.");
        });
      };

      video.onerror = (event: Event | string) => {
        console.error("Video element error:", event);
        displayError("An error occurred with the video stream.");
      };
    } catch (err: unknown) {
      console.error("getUserMedia error:", err);
      let userFacingMessage =
        "Failed to access your camera. Please ensure you've granted camera permissions.";

      if (err instanceof DOMException) {
        if (err.name === "NotAllowedError") {
          userFacingMessage =
            "Camera access was denied. Please allow camera access in your browser settings.";
        } else if (err.name === "NotFoundError" || err.name === "DevicesNotFoundError") {
          userFacingMessage = "No camera found. Please ensure a camera is connected and enabled.";
        } else if (err.name === "NotReadableError") {
          userFacingMessage = "The camera is already in use or could not be accessed.";
        } else if (err.name === "OverconstrainedError") {
          userFacingMessage =
            "Camera constraints could not be satisfied. Trying with basic video constraints.";
          // Optionally, try again with simpler constraints
          try {
            const basicMediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
              video: true,
            });
            video.srcObject = basicMediaStream;
            video.onloadedmetadata = () => {
              feedLoading.classList.add("hidden");
              video.classList.remove("hidden");
              video.play().catch((playError: DOMException) => {
                console.error("Error playing basic video:", playError);
                displayError("Could not play video. Please check your browser settings.");
              });
            };
          } catch (basicErr: unknown) {
            console.error("Basic getUserMedia error:", basicErr);
            if (basicErr instanceof DOMException) {
              displayError(
                "Could not access camera even with basic settings. Please check your system and browser permissions."
              );
            } else {
              displayError("An unexpected error occurred while trying basic camera access.");
            }
          }
          return; // Exit after attempting basic constraints
        }
      }
      displayError(userFacingMessage);
    }
  }
  startVideoFeed();
</script>

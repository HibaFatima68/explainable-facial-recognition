<div class="video-container w-full h-screen flex justify-center items-center box-border px-4">
  <div
    class="feed-container w-full h-full absolute bg-black -rounded-lg overflow-hidden flex justify-center items-center
				transition-all-duration-300-hover:rounded-4xl-hover:shadow-xl">
    <noscript>
      <p class="text-black">Please enable JavaScript to view the video feed.</p>
    </noscript>

    <div
      class="feed-error hidden absolute inset-0 justify-center items-center bg-black-70 text-white text-center z-10">
      <div class="p-4">
        <p class="error-title text-red-400 font-bold mb-1">Error loading video feed.</p>
        <p class="error-message text-sm" id="error-message"></p>
      </div>
    </div>

    <div
      class="feed-loading absolute inset-0 flex justify-center items-center bg-black-70 text-white text-center z-10">
      <p class="loading-message text-white p-1">[Loading video feed...]</p>
    </div>

    <canvas class="feed-overlay absolute inset-0 z-50 bg-transparent pointer-events-none"></canvas>

    <div
      class="feed-info absolute bottom-4 left-4 bg-black-60 text-white px-4 py-2 rounded-lg text-0_9em z-20">
      <p class="info-text m-0 p-1 text-xs text-neutral-400">Live Feed</p>
    </div>

    <video
    id="feed-video"
      class="feed-video w-full h-full object-cover block"
      title="Your video feed"
      playsinline
      autoplay
      muted></video>
  </div>
</div>

<script>
  // --- DOM Element References ---
  // We assert the types using 'as HTML...Element' and include '| null'

import { HAARDetectorWrapper } from "@/lib/haar-cascades";

  // because querySelector/getElementById can return null if the element isn't found.
  const feedLoading = document.querySelector(".feed-loading") as HTMLDivElement | null;
  const feedError = document.querySelector(".feed-error") as HTMLDivElement | null;
  const errorMessageElement = document.getElementById(
    "error-message"
  ) as HTMLParagraphElement | null;
  const video = document.querySelector(".feed-video") as HTMLVideoElement | null;

  // --- Helper Function to Display Errors ---
  /**
   * Displays an error message in the UI and hides the video/loading states.
   * @param message The error message to display to the user.
   */
  function displayError(message: string): void {
    // Safely update DOM elements, checking if they exist
    feedLoading?.classList.add("hidden"); // Use optional chaining for conciseness
    feedError?.classList.remove("hidden");
    if (errorMessageElement) {
      errorMessageElement.textContent = message;
    }
    video?.classList.add("hidden");
  }

  // --- Video Stream Management ---

  /**
   * Attempts to play a given MediaStream on the video element.
   * Handles metadata loading and play errors.
   * @param stream The MediaStream object to play.
   * @param videoEl The HTMLVideoElement to display the stream on.
   * @param loadingEl The loading indicator element.
   */
  async function playStreamOnVideo(
    stream: MediaStream,
    videoEl: HTMLVideoElement,
    loadingEl: HTMLDivElement | null
  ): Promise<void> {
    videoEl.srcObject = stream;

    return new Promise((resolve, reject) => {
      videoEl.onloadedmetadata = async () => {
        loadingEl?.classList.add("hidden");
        videoEl.classList.remove("hidden"); // Make video visible
        try {
          await videoEl.play();
          resolve();
        } catch (playError: unknown) {
          console.error("Error playing video:", playError);
          const errorMessage =
            playError instanceof DOMException ?
              `Could not play video: ${playError.message}.`
            : "Could not play video. Please check your browser settings.";
          displayError(errorMessage);
          reject(new Error(errorMessage));
        }
      };

      videoEl.onerror = (event: Event | string) => {
        console.error("Video element error:", event);
        displayError("An error occurred with the video stream.");
        reject(new Error("Video element encountered an error."));
      };
    });
  }

  /**
   * Initiates the video feed from the user's camera.
   */
  async function startVideoFeed(): Promise<void> {
    // Critical check: Ensure the video element exists before proceeding.
    if (!video) {
      displayError("Video element not found. Cannot start camera feed.");
      console.error("Critical: The '.feed-video' element is missing from the DOM.");
      return;
    }

    // Check for browser compatibility early.
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      displayError("Your browser does not support media devices. Please try a different browser.");
      throw new Error("MediaStream API is not supported by this browser.");
    }

    try {
      // Attempt to get media stream with preferred constraints
      const mediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
        audio: false, // Facial recognition typically does not need audio.
        video: {
          facingMode: "user", // Prioritize front camera.
          // Optional: Re-add ideal width/height if specific resolution is desired:
          // width: { ideal: 1280 },
          // height: { ideal: 720 },
        },
      });

      await playStreamOnVideo(mediaStream, video, feedLoading);
      const haarDetector = new HAARDetectorWrapper('feed-video', );
      
    } catch (err: unknown) {
      console.error("getUserMedia error:", err);

      let userFacingMessage: string;

      if (err instanceof DOMException) {
        switch (err.name) {
          case "NotAllowedError":
            userFacingMessage =
              "Camera access was denied. Please allow camera access in your browser settings.";
            break;
          case "NotFoundError":
          case "DevicesNotFoundError":
            userFacingMessage = "No camera found. Please ensure a camera is connected and enabled.";
            break;
          case "NotReadableError":
            userFacingMessage = "The camera is already in use or could not be accessed.";
            break;
          case "OverconstrainedError":
            userFacingMessage =
              "Camera constraints could not be satisfied. Attempting basic video access...";
            try {
              // If specific constraints fail, try with basic video access
              const basicMediaStream: MediaStream = await navigator.mediaDevices.getUserMedia({
                video: true,
              });
              await playStreamOnVideo(basicMediaStream, video, feedLoading);
              return; // Successfully started with basic constraints, exit.
            } catch (basicErr: unknown) {
              console.error("Basic getUserMedia attempt failed:", basicErr);
              userFacingMessage =
                "Could not access camera even with basic settings. Please check your system and browser permissions.";
            }
            break;
          case "AbortError": // User cancelled the prompt
            userFacingMessage = "Camera access was cancelled by the user.";
            break;
          case "SecurityError": // getUserMedia disabled on non-secure connections
            userFacingMessage = "Camera access requires a secure connection (HTTPS).";
            break;
          default:
            userFacingMessage = `An unexpected camera error occurred: ${err.name}.`;
            break;
        }
      } else if (err instanceof Error) {
        userFacingMessage = `An unexpected error occurred: ${err.message}.`;
      } else {
        userFacingMessage = "An unknown error occurred while accessing the camera.";
      }

      displayError(userFacingMessage);
    }
  }

  // --- Initialize the video feed ---
  document.addEventListener("DOMContentLoaded", () => {
    // It's good practice to call DOM-dependent functions after DOM is loaded.
    startVideoFeed();
  });
</script>
